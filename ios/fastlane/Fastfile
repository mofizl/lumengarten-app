# Fastfile for Lumengarten iOS TestFlight Deployment

default_platform(:ios)

platform :ios do
  before_all do
    setup_ci
  end

  desc "Build and upload to TestFlight"
  lane :testflight do
    # Setup temporary keychain for CI - CRITICAL: default_keychain must be true for GitHub Actions
    create_keychain(
      name: "fastlane_tmp_keychain",
      password: ENV["KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # Import certificate - REQUIRED for signing
    UI.message("üîê Testing certificate file...")
    cert_path = ENV["IOS_CERTIFICATE_PATH"]
    UI.message("Certificate path: #{cert_path}")
    UI.message("Certificate exists: #{File.exist?(cert_path)}")
    if File.exist?(cert_path)
      UI.message("Certificate file size: #{File.size(cert_path)} bytes")
    end
    
    # Try multiple import methods
    UI.message("Trying different import methods...")
    
    # Method 1: Without -T flags
    begin
      sh("security import \"#{ENV['IOS_CERTIFICATE_PATH']}\" -k fastlane_tmp_keychain -P \"#{ENV['IOS_CERTIFICATE_PASSWORD']}\"")
      UI.success("Method 1 (no -T flags) worked!")
    rescue => e
      UI.error("Method 1 failed: #{e}")
      
      # Method 2: With different keychain path
      begin
        sh("security import \"#{ENV['IOS_CERTIFICATE_PATH']}\" -k ~/Library/Keychains/fastlane_tmp_keychain-db -P \"#{ENV['IOS_CERTIFICATE_PASSWORD']}\"")
        UI.success("Method 2 (different keychain path) worked!")
      rescue => e2
        UI.error("Method 2 failed: #{e2}")
        
        # Method 3: Import to login keychain, then copy
        begin
          sh("security import \"#{ENV['IOS_CERTIFICATE_PATH']}\" -P \"#{ENV['IOS_CERTIFICATE_PASSWORD']}\"")
          UI.success("Method 3 (login keychain) worked!")
        rescue => e3
          UI.error("All methods failed: #{e3}")
          raise "Certificate import completely failed"
        end
      end
    end
    
    # Debug: List available certificates in keychain
    UI.message("üîç Available certificates in keychain:")
    sh("security find-identity -v -p codesigning fastlane_tmp_keychain")

    install_provisioning_profile(
      path: ENV["IOS_PROVISIONING_PROFILE_PATH"]
    )
    
    # Get the UUID of the installed provisioning profile
    profile_uuid = sh("security cms -D -i \"#{ENV['IOS_PROVISIONING_PROFILE_PATH']}\" | plutil -extract UUID xml1 -o - - | sed -n 's/.*<string>\\(.*\\)<\\/string>.*/\\1/p'").strip
    UI.message("üì± Provisioning Profile UUID: #{profile_uuid}")

    # Update project settings for distribution
    update_project_team(
      path: "Runner.xcodeproj",
      teamid: ENV["DEVELOPMENT_TEAM"]
    )
    
    # Disable automatic signing and set manual signing with provisioning profile UUID
    update_code_signing_settings(
      path: "Runner.xcodeproj", 
      use_automatic_signing: false,
      targets: ["Runner"],
      code_sign_identity: "iPhone Distribution: Morris Merkel (QX8XC3CNTR)",
      profile_uuid: profile_uuid
    )

    # Install CocoaPods dependencies with iOS 16.0 compatibility
    UI.message("üì¶ Installing CocoaPods for iOS 16.0 deployment target...")
    cocoapods(
      clean_install: true,
      repo_update: true
    )

    # Build Flutter app with specific iOS SDK version
    UI.message("üî® Starting Flutter iOS build...")
    # Force iOS 17.0 or available SDK instead of iOS 18.0
    sh("cd ../.. && flutter build ios --release --no-codesign --target-platform ios-arm64")
    
    # Build signed IPA using Fastlane
    UI.message("üî® Starting Xcode archive build...")
    ipa_path = build_ios_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.lumengarten.lumengartenApp" => profile_uuid
        },
        signingStyle: "manual",
        uploadBitcode: false,
        uploadSymbols: true
      },
      output_directory: "fastlane/builds",
      output_name: "Lumengarten.ipa"
    )
    UI.message("Created signed IPA at: #{ipa_path}")
    
    # Debug environment variables
    UI.message("üîç Debug Environment Variables:")
    UI.message("APP_STORE_CONNECT_API_KEY_ID: #{ENV['APP_STORE_CONNECT_API_KEY_ID']}")
    UI.message("APP_STORE_CONNECT_API_KEY_PATH: #{ENV['APP_STORE_CONNECT_API_KEY_PATH']}")
    
    # Verify IPA exists before upload
    if File.exist?(ipa_path)
      UI.message("‚úÖ IPA file confirmed at: #{ipa_path}")
      
      # Check if API key file exists
      api_key_path = ENV["APP_STORE_CONNECT_API_KEY_PATH"]
      if api_key_path && File.exist?(api_key_path)
        UI.message("‚úÖ API Key file found at: #{api_key_path}")
      else
        UI.error("‚ùå API Key file not found at: #{api_key_path}")
        sh("find .. -name 'AuthKey*.p8' -type f")
      end
      
      # Debug environment access step by step
      UI.message("üîç Step 1: Accessing APP_STORE_CONNECT_API_KEY_ID...")
      
      begin
        key_id = ENV["APP_STORE_CONNECT_API_KEY_ID"]
        UI.message("‚úÖ key_id retrieved: #{key_id.nil? ? 'NIL' : 'SET'}")
      rescue => e
        UI.error("‚ùå Failed to access APP_STORE_CONNECT_API_KEY_ID: #{e}")
        exit(1)
      end
      
      UI.message("üîç Step 2: Setting issuer_id...")
      issuer_id = "d439615c-03af-424b-8ed7-98abfae18d23"
      UI.message("‚úÖ issuer_id set: #{issuer_id}")
      
      UI.message("üîç Step 3: Accessing APP_STORE_CONNECT_API_KEY_PATH...")
      begin
        key_filepath = ENV["APP_STORE_CONNECT_API_KEY_PATH"]
        UI.message("‚úÖ key_filepath retrieved: #{key_filepath}")
      rescue => e
        UI.error("‚ùå Failed to access APP_STORE_CONNECT_API_KEY_PATH: #{e}")
        exit(1)
      end
      
      if key_id.nil? || key_id.empty?
        UI.error("‚ùå APP_STORE_CONNECT_API_KEY_ID is nil or empty!")
        exit(1)
      end
      
      # Upload signed IPA to TestFlight
      # Create API key object first, then use it for upload
      api_key = app_store_connect_api_key(
        key_id: key_id,
        issuer_id: issuer_id,
        key_filepath: key_filepath,
        duration: 1200,
        in_house: false
      )
      
      upload_to_testflight(
        api_key: api_key,
        app_identifier: "com.lumengarten.lumengartenApp",
        skip_waiting_for_build_processing: true,
        ipa: ipa_path
      )
    else
      UI.error("‚ùå IPA file not found at: #{ipa_path}")
      sh("ls -la fastlane/builds/")
    end

    # Cleanup
    delete_keychain(name: "fastlane_tmp_keychain")
  end
end