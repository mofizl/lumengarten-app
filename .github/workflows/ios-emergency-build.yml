name: iOS Emergency Build (Minimal)

on:
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version (e.g., 1.0.0+1)'
        required: true
        default: '1.0.0+1'
      force_build:
        description: 'Force build even if tests fail'
        type: boolean
        required: false
        default: false

jobs:
  emergency-ios-build:
    name: Emergency iOS Build
    runs-on: macos-14
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: System Information
      run: |
        echo "üñ•Ô∏è System Information:"
        sw_vers
        xcode-select --print-path
        ls -la /Applications/ | grep Xcode || echo "No Xcode installations found"
        
    - name: Select Latest Xcode
      run: |
        # Try to find the latest available Xcode
        LATEST_XCODE=$(ls -1 /Applications/ | grep "Xcode" | grep -v "beta" | sort -V | tail -1)
        if [[ -n "$LATEST_XCODE" ]]; then
          echo "üîß Using Xcode: $LATEST_XCODE"
          sudo xcode-select -s "/Applications/$LATEST_XCODE/Contents/Developer"
        else
          echo "‚ö†Ô∏è Using default Xcode"
        fi
        
        xcodebuild -version
        xcrun --show-sdk-version
        
    - name: Setup Flutter (Latest Stable)
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        cache: true
        
    - name: Flutter Doctor
      run: |
        flutter doctor -v
        flutter --version
        
    - name: Install Dependencies
      run: |
        echo "üì¶ Installing Flutter dependencies..."
        flutter pub get
        
        echo "üì± Installing iOS CocoaPods..."
        cd ios
        pod install --repo-update
        cd ..
        
    - name: Update Build Version
      run: |
        echo "üìù Updating version to: ${{ inputs.build_version }}"
        
        # Parse version and build number
        VERSION_INPUT="${{ inputs.build_version }}"
        if [[ "$VERSION_INPUT" == *"+"* ]]; then
          VERSION_NAME=${VERSION_INPUT%+*}
          BUILD_NUMBER=${VERSION_INPUT#*+}
        else
          VERSION_NAME="$VERSION_INPUT"
          BUILD_NUMBER=$(date +%s)
          echo "‚ö†Ô∏è No build number provided, using timestamp: $BUILD_NUMBER"
        fi
        
        echo "Version Name: $VERSION_NAME"
        echo "Build Number: $BUILD_NUMBER"
        
        # Update pubspec.yaml
        sed -i.bak "s/^version: .*/version: $VERSION_NAME+$BUILD_NUMBER/" pubspec.yaml
        
        # Store for later steps
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
    - name: Build iOS (No Code Signing)
      run: |
        echo "üèóÔ∏è Building iOS app without code signing..."
        export IPHONEOS_DEPLOYMENT_TARGET=16.0
        
        # Clean any previous builds
        flutter clean
        flutter pub get
        
        # Build for iOS
        flutter build ios --release --no-codesign --verbose
        
        # Verify build output
        if [[ -d "build/ios/iphoneos/Runner.app" ]]; then
          echo "‚úÖ iOS build successful"
          ls -la build/ios/iphoneos/
        else
          echo "‚ùå iOS build failed - Runner.app not found"
          exit 1
        fi
        
    - name: Create Unsigned IPA
      run: |
        echo "üì¶ Creating unsigned IPA for distribution..."
        cd build/ios/iphoneos
        
        # Create IPA
        zip -r "Runner-unsigned-${{ env.VERSION_NAME }}.ipa" Runner.app
        
        # Verify IPA
        if [[ -f "Runner-unsigned-${{ env.VERSION_NAME }}.ipa" ]]; then
          IPA_SIZE=$(wc -c < "Runner-unsigned-${{ env.VERSION_NAME }}.ipa")
          IPA_SIZE_MB=$(echo "scale=2; $IPA_SIZE / 1024 / 1024" | bc)
          echo "‚úÖ IPA created: ${IPA_SIZE_MB}MB"
        else
          echo "‚ùå IPA creation failed"
          exit 1
        fi
        
    - name: Upload Unsigned IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-unsigned-ipa-${{ env.VERSION_NAME }}
        path: build/ios/iphoneos/Runner-unsigned-${{ env.VERSION_NAME }}.ipa
        retention-days: 30
        
    - name: Upload Build Logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-logs-${{ env.VERSION_NAME }}
        path: |
          ios/Pods/
          build/ios/Build/
          ~/.flutter/logs/
        retention-days: 7
        
    - name: Build Summary
      if: always()
      run: |
        echo "## üö® Emergency iOS Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ env.VERSION_NAME || inputs.build_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** ${{ env.BUILD_NUMBER || github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "### ‚úÖ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the unsigned IPA from the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Sign manually using Xcode or fastlane" >> $GITHUB_STEP_SUMMARY
          echo "3. Upload to TestFlight manually if needed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Build Failed:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the build logs for detailed errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Review Flutter doctor output" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify Xcode and iOS SDK compatibility" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**This is an emergency build process - for production use, implement proper code signing**" >> $GITHUB_STEP_SUMMARY