name: TestFlight Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Build version'
        required: true
        default: '1.0.0'
        type: string

jobs:
  deploy-testflight:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Setup iOS Code Signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$IOS_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH
        echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 -D > $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Debug: Check certificate file before import
        echo "üìã Certificate file info:"
        ls -la $CERTIFICATE_PATH
        file $CERTIFICATE_PATH
        
        # Debug: Try to read certificate without importing
        echo "üîç Testing certificate readability:"
        openssl pkcs12 -info -in $CERTIFICATE_PATH -passin pass:"$IOS_CERTIFICATE_PASSWORD" -noout || echo "‚ùå Certificate test failed"
        
        # Download Apple Intermediate Certificate
        curl -o $RUNNER_TEMP/AppleWWDRCA.cer https://www.apple.com/certificateauthority/AppleWWDRCA.cer
        security import $RUNNER_TEMP/AppleWWDRCA.cer -k $KEYCHAIN_PATH -T /usr/bin/codesign
        
        # Try different approach: Import P12 to default keychain first
        echo "üîÑ Importing to login keychain first..."
        security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign -T /usr/bin/security
        
        # Copy from login to our keychain
        echo "üîÑ Copying certificate to build keychain..."
        security find-identity -v -s "iPhone Distribution" ~/Library/Keychains/login.keychain-db
        
        # Alternative: Skip certificate import entirely and use existing system certificates
        echo "üîç Available identities:"
        security find-identity -v -p codesigning
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
        echo "‚úÖ Code signing setup completed"
    
    - name: Build iOS for App Store
      run: |
        # Build iOS app for App Store distribution
        flutter build ios --release
        
        echo "‚úÖ iOS build completed"
    
    - name: Create IPA for TestFlight
      run: |
        cd ios
        
        # Archive the app
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -archivePath Runner.xcarchive \
          -allowProvisioningUpdates \
          archive
        
        # Export IPA for App Store
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath . \
          -exportOptionsPlist Runner/ExportOptions.plist \
          -allowProvisioningUpdates
          
        # Find the IPA file
        IPA_PATH=$(find . -name "*.ipa" | head -1)
        echo "IPA created at: $IPA_PATH"
        ls -la "$IPA_PATH"
        
        echo "‚úÖ IPA export completed"
    
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
      run: |
        cd ios
        
        # Find the IPA file
        IPA_PATH=$(find . -name "*.ipa" | head -1)
        
        if [ -n "$IPA_PATH" ]; then
          echo "üì± Found IPA: $IPA_PATH"
          
          # Create App Store Connect API key
          mkdir -p ~/.appstoreconnect/private_keys/
          echo -n "$APP_STORE_CONNECT_PRIVATE_KEY" | base64 -D > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Upload to TestFlight
          echo "üöÄ Uploading to TestFlight..."
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose
            
          echo "‚úÖ Successfully uploaded to TestFlight!"
        else
          echo "‚ùå No IPA file found"
          exit 1
        fi
    
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: testflight-ipa
        path: ios/*.ipa
        if-no-files-found: warn