name: Deploy to Staging

on:
  push:
    branches: [ develop, staging ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy to staging'
        type: boolean
        required: false
        default: false

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: macos-14
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || inputs.force_deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
        xcodebuild -version
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        cache: true
        cache-key: 'flutter-staging-:os:-:channel:-:version:-:arch:-:hash:'
        
    - name: Cache Pub Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
          **/.dart_tool
        key: pub-cache-staging-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          pub-cache-staging-
          
    - name: Cache iOS Pods
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: pods-staging-${{ hashFiles('ios/Podfile.lock') }}
        restore-keys: |
          pods-staging-
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Update version for staging
      run: |
        # Generate staging version with timestamp
        STAGING_VERSION="staging-$(date +%Y%m%d-%H%M%S)"
        TIMESTAMP_BUILD=$(date +%s)
        
        echo "📝 Staging version: $STAGING_VERSION+$TIMESTAMP_BUILD"
        sed -i.bak "s/^version: .*/version: $STAGING_VERSION+$TIMESTAMP_BUILD/" pubspec.yaml
        
        # Store for later steps
        echo "STAGING_VERSION=$STAGING_VERSION" >> $GITHUB_ENV
        echo "BUILD_NUMBER=$TIMESTAMP_BUILD" >> $GITHUB_ENV
        
    - name: Generate staging release notes
      run: |
        cat > ios/staging_notes.txt << EOF
        🧪 STAGING BUILD - NOT FOR PRODUCTION
        
        Branch: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date "+%Y-%m-%d %H:%M:%S UTC")
        
        This is an automated staging build for testing purposes.
        Do not distribute to end users.
        EOF
        
        echo "✅ Staging notes created:"
        cat ios/staging_notes.txt
        
    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install --repo-update
        
    - name: Build iOS for Staging (AdHoc)
      run: |
        export IPHONEOS_DEPLOYMENT_TARGET=16.0
        flutter build ios --release --no-codesign
        
    - name: Create unsigned IPA for staging
      run: |
        cd build/ios/iphoneos
        zip -r Runner-staging.ipa Runner.app
        
        # Move to ios directory
        mkdir -p ../../../ios/staging
        mv Runner-staging.ipa ../../../ios/staging/
        
        echo "✅ Staging IPA created"
        ls -la ../../../ios/staging/
        
    - name: Upload Staging IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-staging-${{ env.STAGING_VERSION }}
        path: ios/staging/Runner-staging.ipa
        
    - name: Upload Staging Notes Artifact
      uses: actions/upload-artifact@v4
      with:
        name: staging-notes-${{ env.STAGING_VERSION }}
        path: ios/staging_notes.txt
        
    - name: Staging Build Summary
      if: always()
      run: |
        echo "## 🧪 Staging Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ env.STAGING_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ -f "ios/staging/Runner-staging.ipa" ]]; then
          IPA_SIZE=$(wc -c < "ios/staging/Runner-staging.ipa")
          IPA_SIZE_MB=$(echo "scale=2; $IPA_SIZE / 1024 / 1024" | bc)
          echo "**✅ Staging IPA:** ${IPA_SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY
        else
          echo "**❌ Staging IPA:** Creation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Testing Instructions:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the staging IPA artifact" >> $GITHUB_STEP_SUMMARY
        echo "2. Install on test devices using iOS App Installer or similar" >> $GITHUB_STEP_SUMMARY
        echo "3. Test all features thoroughly" >> $GITHUB_STEP_SUMMARY
        echo "4. Report any issues before promoting to production" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **This is a staging build - do not distribute to end users**" >> $GITHUB_STEP_SUMMARY