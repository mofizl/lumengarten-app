name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run tests
      run: flutter test
    
    - name: Build APK
      run: flutter build apk --release
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
        xcode-select -p
        xcodebuild -version
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
    
    - name: Setup iOS signing (optional for no-codesign builds)
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "Code signing setup - skipping for no-codesign build"
        echo "IOS_CERTIFICATE_BASE64 length: ${#IOS_CERTIFICATE_BASE64}"
        echo "KEYCHAIN_PASSWORD set: $([[ -n "$KEYCHAIN_PASSWORD" ]] && echo 'yes' || echo 'no')"
        echo "Building without code signing - certificates not required for this step"
    
    - name: Build iOS
      env:
        IPHONEOS_DEPLOYMENT_TARGET: '12.0'
      run: |
        # List available SDKs
        xcodebuild -showsdks | grep iphoneos
        
        # Get the latest available iOS SDK
        IOS_SDK=$(xcodebuild -showsdks | grep iphoneos | tail -1 | awk '{print $4}')
        echo "Using iOS SDK: $IOS_SDK"
        
        # Set deployment target for Flutter
        export IPHONEOS_DEPLOYMENT_TARGET=12.0
        
        # Force Flutter to use specific iOS version
        cd ios
        
        # Replace any iOS version references in project settings
        sed -i.bak 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]*/IPHONEOS_DEPLOYMENT_TARGET = 12.0/g' Runner.xcodeproj/project.pbxproj
        
        cd ..
        
        # Now try Flutter build with deployment target set
        flutter build ios --release --no-codesign
    
    - name: Create unsigned IPA for testing
      run: |
        echo "Looking for Flutter iOS build output..."
        
        # Find the actual build output directory
        find . -name "Runner.app" -type d 2>/dev/null || echo "Runner.app not found"
        find . -path "*/ios/*" -name "*.app" -type d 2>/dev/null || echo "No .app bundles found"
        
        # Check common Flutter build paths
        echo "Checking common Flutter iOS build paths:"
        ls -la build/ios/ 2>/dev/null || echo "build/ios/ not found"
        ls -la ios/build/ 2>/dev/null || echo "ios/build/ not found"
        ls -la ios/build/Release-iphoneos/ 2>/dev/null || echo "ios/build/Release-iphoneos/ not found"
        
        # Try to find and use the correct path
        APP_PATH=$(find . -name "Runner.app" -type d | head -1)
        
        if [ -n "$APP_PATH" ]; then
          echo "Found Runner.app at: $APP_PATH"
          
          cd ios
          mkdir -p Payload
          cp -r "../$APP_PATH" Payload/
          zip -r Runner.ipa Payload
          echo "IPA created successfully"
          ls -la Runner.ipa
        else
          echo "Could not find Runner.app - listing all build outputs:"
          find . -name "*.app" -o -name "*Runner*" | head -20
        fi
    
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-release
        path: |
          ios/Runner.ipa
          ios/*.ipa
      if-no-files-found: warn