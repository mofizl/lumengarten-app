name: Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run tests
      run: flutter test
    
    - name: Build APK
      run: flutter build apk --release
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: build/app/outputs/flutter-apk/app-release.apk

  build-ios:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
        xcode-select -p
        xcodebuild -version
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Install CocoaPods
      run: |
        cd ios
        pod install
    
    - name: Setup iOS signing (optional for no-codesign builds)
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "Code signing setup - skipping for no-codesign build"
        echo "IOS_CERTIFICATE_BASE64 length: ${#IOS_CERTIFICATE_BASE64}"
        echo "KEYCHAIN_PASSWORD set: $([[ -n "$KEYCHAIN_PASSWORD" ]] && echo 'yes' || echo 'no')"
        echo "Building without code signing - certificates not required for this step"
    
    - name: Build iOS
      run: |
        # List available SDKs
        xcodebuild -showsdks | grep iphoneos
        
        # Get the latest available iOS SDK
        IOS_SDK=$(xcodebuild -showsdks | grep iphoneos | tail -1 | awk '{print $4}')
        echo "Using iOS SDK: $IOS_SDK"
        
        # Set the iOS SDK environment variable for Flutter
        export FLUTTER_XCODE_IPHONEOS_DEPLOYMENT_TARGET=12.0
        
        # Build iOS app with Flutter
        flutter build ios --release --no-codesign
    
    - name: Create unsigned IPA for testing
      run: |
        cd ios
        
        echo "Creating unsigned IPA from Flutter build output"
        
        # Create Payload directory
        mkdir -p Payload
        
        # Copy the built app to Payload directory
        cp -r build/ios/Release-iphoneos/Runner.app Payload/
        
        # Create IPA file
        zip -r Runner.ipa Payload
        
        echo "Unsigned IPA created successfully"
        ls -la Runner.ipa
    
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: ios-release
        path: ios/Runner/*.ipa