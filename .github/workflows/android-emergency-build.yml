name: Android Emergency Build (Minimal)

on:
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Build version (e.g., 1.0.0+1)'
        required: true
        default: '1.0.0+1'
      build_type:
        description: 'Build type'
        required: false
        default: 'release'
        type: choice
        options:
          - debug
          - release

jobs:
  emergency-android-build:
    name: Emergency Android Build
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: System Information
      run: |
        echo "üñ•Ô∏è System Information:"
        uname -a
        java --version || echo "Java not found"
        
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        
    - name: Verify Java Installation
      run: |
        echo "‚òï Java Information:"
        java --version
        javac --version
        echo "JAVA_HOME: $JAVA_HOME"
        
    - name: Setup Flutter (Latest Stable)
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.2'
        cache: true
        
    - name: Flutter Doctor
      run: |
        flutter doctor -v
        flutter --version
        
    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          android/.gradle
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-
          
    - name: Install Flutter Dependencies
      run: |
        echo "üì¶ Installing Flutter dependencies..."
        flutter pub get
        
    - name: Update Build Version
      run: |
        echo "üìù Updating version to: ${{ inputs.build_version }}"
        
        # Parse version and build number
        VERSION_INPUT="${{ inputs.build_version }}"
        if [[ "$VERSION_INPUT" == *"+"* ]]; then
          VERSION_NAME=${VERSION_INPUT%+*}
          BUILD_NUMBER=${VERSION_INPUT#*+}
        else
          VERSION_NAME="$VERSION_INPUT"
          BUILD_NUMBER=$(date +%s)
          echo "‚ö†Ô∏è No build number provided, using timestamp: $BUILD_NUMBER"
        fi
        
        echo "Version Name: $VERSION_NAME"
        echo "Build Number: $BUILD_NUMBER"
        
        # Update pubspec.yaml
        sed -i "s/^version: .*/version: $VERSION_NAME+$BUILD_NUMBER/" pubspec.yaml
        
        # Store for later steps
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
    - name: Clean and Prepare Build
      run: |
        echo "üßπ Cleaning previous builds..."
        flutter clean
        flutter pub get
        
        # Check Gradle wrapper
        if [[ -f "android/gradlew" ]]; then
          chmod +x android/gradlew
          echo "‚úÖ Gradle wrapper found and made executable"
        else
          echo "‚ö†Ô∏è No gradlew found"
        fi
        
    - name: Build Android APK
      run: |
        echo "üèóÔ∏è Building Android ${{ inputs.build_type }} APK..."
        
        if [[ "${{ inputs.build_type }}" == "debug" ]]; then
          flutter build apk --debug --verbose
          APK_PATH="build/app/outputs/flutter-apk/app-debug.apk"
          APK_NAME="app-debug-${{ env.VERSION_NAME }}.apk"
        else
          flutter build apk --release --verbose
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          APK_NAME="app-release-${{ env.VERSION_NAME }}.apk"
        fi
        
        # Verify APK exists
        if [[ -f "$APK_PATH" ]]; then
          APK_SIZE=$(wc -c < "$APK_PATH")
          APK_SIZE_MB=$(echo "scale=2; $APK_SIZE / 1024 / 1024" | bc)
          echo "‚úÖ APK created: ${APK_SIZE_MB}MB"
          
          # Rename APK with version
          cp "$APK_PATH" "build/app/outputs/flutter-apk/$APK_NAME"
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "APK_SIZE_MB=$APK_SIZE_MB" >> $GITHUB_ENV
        else
          echo "‚ùå APK creation failed - file not found at: $APK_PATH"
          echo "üìÅ Available files:"
          find build/ -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          exit 1
        fi
        
    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ env.VERSION_NAME }}
        path: build/app/outputs/flutter-apk/${{ env.APK_NAME }}
        retention-days: 30
        
    - name: Upload Build Reports
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: android-build-reports-${{ env.VERSION_NAME }}
        path: |
          android/app/build/reports/
          android/build/reports/
        retention-days: 7
        
    - name: Build Summary
      if: always()
      run: |
        echo "## ü§ñ Emergency Android Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ inputs.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ env.VERSION_NAME || inputs.build_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** ${{ env.BUILD_NUMBER || github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "**‚úÖ APK Created:** ${{ env.APK_SIZE_MB }}MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the APK from the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Test on physical devices" >> $GITHUB_STEP_SUMMARY
          echo "3. Upload to Google Play Console if ready" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Build Failed:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the build logs for detailed errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Review Gradle and Java compatibility" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify Flutter doctor output" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**This is an emergency build process - ensure proper testing before distribution**" >> $GITHUB_STEP_SUMMARY